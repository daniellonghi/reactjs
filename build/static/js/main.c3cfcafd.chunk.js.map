{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","pages/product/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","api","axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","a","get","response","data","docs","setState","prevPage","alert","pageNumber","nextPage","pages","this","className","map","item","key","_id","title","description","to","disabled","onClick","Component","Product","product","props","match","params","href","url","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAOeA,G,YAJA,kBACX,4BAAQC,GAAG,eAAX,e,+FCGWC,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,8CCEQC,G,iNACjBC,MAAQ,CACJC,SAAU,GACVC,YAAa,GACbC,KAAM,G,EAOVC,a,qBAAe,gDAAAC,EAAA,4DAAQF,EAAR,+BAAe,EAAf,SACYR,EAAIW,IAAJ,yBAA0BH,IADtC,OACLI,EADK,SAG8BA,EAASC,KAArCP,EAHF,EAGJQ,KAAmBP,EAHf,wBAIX,EAAKQ,SAAS,CAACT,WAAUC,cAAaC,SAJ3B,yC,EAOfQ,SAAW,WAAO,IACNR,EAAS,EAAKH,MAAdG,KAER,GAAY,IAATA,EAAY,OAAOS,MAAM,sCAE5B,IAAMC,EAAaV,EAAO,EAC1B,EAAKC,aAAaS,I,EAEtBC,SAAW,WAAO,IAAD,EACgB,EAAKd,MAA1BG,EADK,EACLA,KACR,GAAGA,IAFU,EACCD,YACUa,MAAO,OAAOH,MAAM,uCAE5C,IAAMC,EAAaV,EAAO,EAC1B,EAAKC,aAAaS,I,mFAvBlBG,KAAKZ,iB,+BA0BA,IAAD,EACkCY,KAAKhB,MAApCC,EADH,EACGA,SAAUE,EADb,EACaA,KAAMD,EADnB,EACmBA,YACvB,OACI,yBAAKe,UAAU,gBAEPhB,EAASiB,IAAK,SAAAC,GAAI,OACd,6BAASC,IAAKD,EAAKE,KACf,gCAASF,EAAKG,OACd,2BAAIH,EAAKI,aACT,kBAAC,IAAD,CAAMC,GAAE,oBAAeL,EAAKE,MAA5B,cAIZ,yBAAKJ,UAAU,WACX,4BAAQQ,SAAmB,IAATtB,EAAYuB,QAASV,KAAKL,UAA5C,YACA,4BAAQc,SAAUtB,IAASD,EAAYa,MAAOW,QAASV,KAAKF,UAA5D,oB,GAjDca,cCFbC,G,iNACjB5B,MAAQ,CACJ6B,QAAS,I,0MAIDnC,EAAOsB,KAAKc,MAAMC,MAAMC,OAAxBtC,G,SACeC,EAAIW,IAAJ,oBAAqBZ,I,OAAtCa,E,OACNS,KAAKN,SAAS,CAACmB,QAAStB,EAASC,O,mIAG5B,IACGqB,EAAYb,KAAKhB,MAAjB6B,QACR,OACI,yBAAKZ,UAAU,oBACX,uBAAGA,UAAU,aAAagB,KAAK,KAA/B,UACA,yBAAKhB,UAAU,gBACX,4BAAKY,EAAQP,OACb,2BAAIO,EAAQN,aACZ,mCACS,uBAAGU,KAAMJ,EAAQK,KAAML,EAAQK,Y,GApBvBP,cCUtBQ,EATA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,gBAAgBC,UAAWV,OCGhCW,EAPH,kBACV,yBAAKtB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCbNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c3cfcafd.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./styles.css\";\r\n\r\nconst Header = () => (\r\n    <header id=\"main-header\">JS Header</header>\r\n);\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://rocketseat-node.herokuapp.com/api'\r\n});\r\n\r\nexport default api;","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './styles.css';\r\n\r\nexport default class Main extends Component{\r\n    state = {\r\n        products: [],\r\n        productInfo: {},\r\n        page: 1,\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.loadProducts();\r\n    }\r\n\r\n    loadProducts = async  (page = 1) => {\r\n        const response = await api.get(`/products?page=${page}`);\r\n        // DESISTRUTURO COM OUTRO NOME\r\n        const {docs: products, ...productInfo} = response.data;\r\n        this.setState({products, productInfo, page});\r\n    };\r\n\r\n    prevPage = () => {\r\n        const { page } = this.state;\r\n\r\n        if(page === 1) return alert(\"Você já está na primeira.\");\r\n\r\n        const pageNumber = page - 1;\r\n        this.loadProducts(pageNumber);\r\n    }\r\n    nextPage = () => {\r\n        const { page, productInfo} = this.state;\r\n        if(page === productInfo.pages) return alert(\"Você já está na última.\");\r\n\r\n        const pageNumber = page + 1;\r\n        this.loadProducts(pageNumber);\r\n    }\r\n\r\n    render(){\r\n        const {products, page, productInfo} = this.state;\r\n        return(\r\n            <div className=\"product-list\">\r\n                {\r\n                    products.map( item => (\r\n                        <article key={item._id}>\r\n                            <strong>{item.title}</strong>\r\n                            <p>{item.description}</p>\r\n                            <Link to={`/products/${item._id}`}>Acessar</Link>\r\n                        </article>\r\n                    ))\r\n                }\r\n                <div className=\"actions\">\r\n                    <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\r\n                    <button disabled={page === productInfo.pages} onClick={this.nextPage}>Próxima</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport './styles.css';\r\n\r\nexport default class Product extends Component{\r\n    state = {\r\n        product: {},\r\n    };\r\n\r\n    async componentDidMount(){\r\n        const { id } = this.props.match.params\r\n        const response = await api.get(`/products/${id}`);\r\n        this.setState({product: response.data});\r\n    }\r\n\r\n    render(){\r\n        const { product } = this.state;\r\n        return (\r\n            <div className=\"external-content\">\r\n                <a className=\"voltar-btn\" href=\"/\">Voltar</a>\r\n                <div className=\"product-info\">\r\n                    <h1>{product.title}</h1>\r\n                    <p>{product.description}</p>\r\n                    <p>\r\n                        URL: <a href={product.url}>{product.url}</a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport Main from './pages/main';\r\nimport Product from './pages/product';\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n        <Route exact path=\"/\" component={Main}></Route>\r\n        <Route path=\"/products/:id\" component={Product}></Route>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\nimport './styles.css';\nimport Header from './components/Header';\nimport Routes from './routes';\n\nconst App = () => (\n  <div className=\"App\">\n      <Header />\n      <Routes />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}